allprojects {
  tasks.withType(Jar) {
    manifest {
      attributes(
        "Automatic-Module-Name": project.group + '.' + project.name,
        "Implementation-Title": project.group + '.' + project.name,
        "Implementation-Version": archiveVersion,
        "Implementation-Vendor": "selenide.org")
    }
  }
  tasks.withType(Javadoc) {
    failOnError = false
  }
}

task allprojectsJar(type: Jar, dependsOn: classes) {
  from allprojects.sourceSets.main.output
  destinationDir file("${project.buildDir}/libs-to-upload")
}

task allprojectsSourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from allprojects.sourceSets.main.allSource
  destinationDir file("${project.buildDir}/libs-to-upload")
}

task allprojectsJavadoc(type: Javadoc, dependsOn: classes) {
  source = allprojects.sourceSets.main.allJava
  destinationDir = file("${project.docsDir}/javadoc-to-upload")
  classpath = project.sourceSets.main.compileClasspath
  classpath += project(":statics").sourceSets.main.compileClasspath
  classpath += project(":modules:grid").sourceSets.main.compileClasspath
  classpath += project(":modules:junit4").sourceSets.main.compileClasspath
  classpath += project(":modules:testng").sourceSets.main.compileClasspath
}

task allprojectsJavadocJar(type: Jar, dependsOn: allprojectsJavadoc) {
  archiveClassifier = 'javadoc'
  from allprojectsJavadoc.destinationDir
  destinationDir file("${project.buildDir}/libs-to-upload")
}

uploadArchives.dependsOn(allprojectsJar, allprojectsSourcesJar, allprojectsJavadocJar)

artifacts {
  archives allprojectsJar
  archives allprojectsSourcesJar
  archives allprojectsJavadocJar
}


if (project.hasProperty("signing.keyId")) {
  apply plugin: 'signing'

  signing {
    sign allprojectsJar
    sign allprojectsSourcesJar
    sign allprojectsJavadocJar
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: project.version.endsWith("-SNAPSHOT") ?
          'https://oss.sonatype.org/content/repositories/snapshots/' :
          'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: "$sonatypeUsername", password: "$sonatypePassword")
        }

        pom.project {
          name archivesBaseName
          packaging 'jar'
          description 'Selenide = concise API for Selenium WebDriver'
          url 'https://github.com/selenide/selenide'

          scm {
            url 'scm:git@github.com:selenide/selenide.git'
            connection 'scm:git@github.com:selenide/selenide.git'
            developerConnection 'scm:git@github.com:selenide/selenide.git'
          }

          licenses {
            license {
              name 'MIT'
              url 'https://opensource.org/licenses/MIT'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'asolntsev'
              name 'Andrei Solntsev'
            }
            developer {
              id 'BorisOsipov'
              name 'Boris Osipov'
            }
            developer {
              id 'rosolko'
              name 'Aliaksandr Rasolka'
            }
            developer {
              id 'vinogradoff'
              name 'Alexei Vinogradov'
            }
            developer {
              id 'dstekanov'
              name 'Dmytro Stekanov'
            }
          }
        }

        //mess with the generated pom to set the 'packaging' tag
        pom.withXml { XmlProvider xmlProvider ->
          def xml = xmlProvider.asString()
          def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

          pomXml.version[0] + { packaging('jar') }

          def newXml = new StringWriter()
          def printer = new XmlNodePrinter(new PrintWriter(newXml))
          printer.preserveWhitespace = true
          printer.print(pomXml)
          xml.setLength(0)
          xml.append(newXml.toString())
        }
      }
    }
  }
}
